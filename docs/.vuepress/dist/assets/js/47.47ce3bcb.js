(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{265:function(a,t,v){"use strict";v.r(t);var _=v(0),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#java"}},[a._v("java")]),v("ul",[v("li",[v("a",{attrs:{href:"#执行"}},[a._v("执行")])]),v("li",[v("a",{attrs:{href:"#语法相关"}},[a._v("语法相关")])])])]),v("li",[v("a",{attrs:{href:"#类"}},[a._v("类")]),v("ul",[v("li",[v("a",{attrs:{href:"#对象"}},[a._v("对象")])]),v("li",[v("a",{attrs:{href:"#成员变量和局部变量"}},[a._v("成员变量和局部变量")])]),v("li",[v("a",{attrs:{href:"#构造方法"}},[a._v("构造方法")])])])]),v("li",[v("a",{attrs:{href:"#uml-统一建模语言"}},[a._v("UML 统一建模语言")])]),v("li",[v("a",{attrs:{href:"#异常处理"}},[a._v("异常处理")])]),v("li",[v("a",{attrs:{href:"#时间处理"}},[a._v("时间处理")])]),v("li",[v("a",{attrs:{href:"#集合"}},[a._v("集合")]),v("ul",[v("li",[v("a",{attrs:{href:"#list"}},[a._v("List")])]),v("li",[v("a",{attrs:{href:"#set："}},[a._v("Set：")])]),v("li",[v("a",{attrs:{href:"#map"}},[a._v("Map:")])])])]),v("li",[v("a",{attrs:{href:"#泛型"}},[a._v("泛型")])]),v("li",[v("a",{attrs:{href:"#javadoc"}},[a._v("javadoc")]),v("ul",[v("li",[v("a",{attrs:{href:"#hashmap"}},[a._v("HashMap")])])])]),v("li",[v("a",{attrs:{href:"#学习笔记"}},[a._v("学习笔记")]),v("ul",[v("li",[v("a",{attrs:{href:"#相关名词"}},[a._v("相关名词")])]),v("li",[v("a",{attrs:{href:"#安装jdk"}},[a._v("安装JDK")])]),v("li",[v("a",{attrs:{href:"#jdk与jvm"}},[a._v("JDK与JVM")])])])]),v("li",[v("a",{attrs:{href:"#教程笔记："}},[a._v("教程笔记：")]),v("ul",[v("li",[v("a",{attrs:{href:"#环境变量"}},[a._v("环境变量")])]),v("li",[v("a",{attrs:{href:"#用记事本编写程序"}},[a._v("用记事本编写程序")])]),v("li",[v("a",{attrs:{href:"#使用ide"}},[a._v("使用IDE")])])])]),v("li",[v("a",{attrs:{href:"#spring"}},[a._v("spring")]),v("ul",[v("li",[v("a",{attrs:{href:"#spring-mvc"}},[a._v("spring mvc")])]),v("li",[v("a",{attrs:{href:"#spring-boot"}},[a._v("spring boot")])])])]),v("li",[v("a",{attrs:{href:"#第三方包"}},[a._v("第三方包")])])])]),a._v(" "),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#java"}},[a._v("java")]),v("ul",[v("li",[v("a",{attrs:{href:"#执行"}},[a._v("执行")])]),v("li",[v("a",{attrs:{href:"#语法相关"}},[a._v("语法相关")])])])]),v("li",[v("a",{attrs:{href:"#类"}},[a._v("类")]),v("ul",[v("li",[v("a",{attrs:{href:"#对象"}},[a._v("对象")])]),v("li",[v("a",{attrs:{href:"#成员变量和局部变量"}},[a._v("成员变量和局部变量")])]),v("li",[v("a",{attrs:{href:"#构造方法"}},[a._v("构造方法")])])])]),v("li",[v("a",{attrs:{href:"#uml-统一建模语言"}},[a._v("UML 统一建模语言")])]),v("li",[v("a",{attrs:{href:"#异常处理"}},[a._v("异常处理")])]),v("li",[v("a",{attrs:{href:"#时间处理"}},[a._v("时间处理")])]),v("li",[v("a",{attrs:{href:"#集合"}},[a._v("集合")]),v("ul",[v("li",[v("a",{attrs:{href:"#list"}},[a._v("List")])]),v("li",[v("a",{attrs:{href:"#set："}},[a._v("Set：")])]),v("li",[v("a",{attrs:{href:"#map"}},[a._v("Map:")])])])]),v("li",[v("a",{attrs:{href:"#泛型"}},[a._v("泛型")])]),v("li",[v("a",{attrs:{href:"#javadoc"}},[a._v("javadoc")]),v("ul",[v("li",[v("a",{attrs:{href:"#hashmap"}},[a._v("HashMap")])])])]),v("li",[v("a",{attrs:{href:"#学习笔记"}},[a._v("学习笔记")]),v("ul",[v("li",[v("a",{attrs:{href:"#相关名词"}},[a._v("相关名词")])]),v("li",[v("a",{attrs:{href:"#安装jdk"}},[a._v("安装JDK")])]),v("li",[v("a",{attrs:{href:"#jdk与jvm"}},[a._v("JDK与JVM")])])])]),v("li",[v("a",{attrs:{href:"#教程笔记："}},[a._v("教程笔记：")]),v("ul",[v("li",[v("a",{attrs:{href:"#环境变量"}},[a._v("环境变量")])]),v("li",[v("a",{attrs:{href:"#用记事本编写程序"}},[a._v("用记事本编写程序")])]),v("li",[v("a",{attrs:{href:"#使用ide"}},[a._v("使用IDE")])])])]),v("li",[v("a",{attrs:{href:"#spring"}},[a._v("spring")]),v("ul",[v("li",[v("a",{attrs:{href:"#spring-mvc"}},[a._v("spring mvc")])]),v("li",[v("a",{attrs:{href:"#spring-boot"}},[a._v("spring boot")])])])]),v("li",[v("a",{attrs:{href:"#第三方包"}},[a._v("第三方包")])])])]),v("p"),a._v(" "),v("hr"),a._v(" "),v("h2",{attrs:{id:"java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" java")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("双引号表示字符串；单引号表示字符，返回ascii码，可与数字进行运算")])]),a._v(" "),v("li",[v("p",[a._v("包声明；在包文件头部 "),v("code",[a._v("package xxx")])])])]),a._v(" "),v("h3",{attrs:{id:"执行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行"}},[a._v("#")]),a._v(" 执行")]),a._v(" "),v("ol",[v("li",[a._v("编译 "),v("code",[a._v("javac Hello.java")])]),a._v(" "),v("li",[a._v("执行 Hello.class 使用 "),v("code",[a._v("java Hello")])])]),a._v(" "),v("h3",{attrs:{id:"语法相关"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语法相关"}},[a._v("#")]),a._v(" 语法相关")]),a._v(" "),v("ul",[v("li",[a._v("语句后面注意加分号")])]),a._v(" "),v("h4",{attrs:{id:"关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[a._v("#")]),a._v(" 关键字")]),a._v(" "),v("ul",[v("li",[a._v("java 关键字区分大小写")])]),a._v(" "),v("h4",{attrs:{id:"标识符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[a._v("#")]),a._v(" 标识符")]),a._v(" "),v("ul",[v("li",[a._v("给变量， 类，方法等命名的符号")]),a._v(" "),v("li",[a._v("数字，字母，下划线，$，组成，不能以数字开头")]),a._v(" "),v("li",[a._v("严格区分大小写")])]),a._v(" "),v("h4",{attrs:{id:"变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),v("ul",[v("li",[a._v("区分大小写")]),a._v(" "),v("li",[a._v("变量类型 变量名 = 变量值")]),a._v(" "),v("li",[a._v("先申明，后使用")])]),a._v(" "),v("h4",{attrs:{id:"数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),v("ul",[v("li",[a._v("java是强类型")])]),a._v(" "),v("ol",[v("li",[a._v("基本数据类型(括号中的值为字节)")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("|-- 数值型  \n    |-- 整数：byte，short，long，int(4)\n    |-- 浮点：float(4)数字后添加字母f， double(8)\n|-- 字符型 char(2) 用单引号 只能是一个字符\n|-- 布尔型 boolean(1)  \n")])])]),v("ul",[v("li",[v("p",[a._v("int 默认初始值：0")])]),a._v(" "),v("li",[v("p",[a._v("基本类型包装类(与基本类型之间可以自动转换)：")])])]),a._v(" "),v("p",[a._v("Byte Short Integer Long Float Double Character Boolean")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("int num = 123;\nInteger n1 = new Integer(num)\nfloat n2 = n1.floatValue()\n")])])]),v("ul",[v("li",[a._v("基本类型转换为字符串\n"),v("ul",[v("li",[a._v("使用 基本类型的封装类的 toString() 方法")]),a._v(" "),v("li",[a._v("使用 String 类的 valueOf() 方法")]),a._v(" "),v("li",[a._v("利用与 空字符串相加")])])]),a._v(" "),v("li",[a._v("字符串转基本类型\n"),v("ul",[v("li",[a._v("包装类.parseXxx(xx)")]),a._v(" "),v("li",[a._v("包装类.valueOf(xx)")])])])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('int num = 12;\nSystem.out.println(Integer.toString(num));\nSystem.out.println(String.valueOf(num));\nSystem.out.println(num + "");\n\nString s = "12.36";\nDouble db = Double.parseDouble(s);\nDouble dd = Double.valueOf(s);\n')])])]),v("ol",{attrs:{start:"2"}},[v("li",[a._v("引用类型")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("|-- 类\n|-- 接口\n|-- 数组\n")])])]),v("p",[a._v("float与double的区别：")]),a._v(" "),v("ul",[v("li",[a._v("float占4字节，32位(但有9位要拿来放符号位和指数位)，最大数 8388608 最多7位，但只能保证6位精准")]),a._v(" "),v("li",[a._v("double 位数部分52位 最大数2^52 4503599627370496 精度15-16位")]),a._v(" "),v("li",[a._v("double消耗内存是float的两倍，double的运算速度比float慢")])]),a._v(" "),v("h5",{attrs:{id:"string"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),v("ul",[v("li",[a._v("两种方式： "),v("code",[a._v('String str = ""')]),a._v(" 或 "),v("code",[a._v('String str = new String("")')])]),a._v(" "),v("li",[a._v("引用数据类型 ；是字符串，用双引号")]),a._v(" "),v("li",[a._v("位于java.lang包中，默认自动引入所有的程序")]),a._v(" "),v("li",[a._v("每次创建一个字符串都是新对象")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('String s1 = "字符串";\nString s2 = "字符串";\nString s3 =  new String("字符串");\ns1 和 s2 相等 因为多次出现的字符常量，java编译时只创建一个\ns1，s2 和 s3 是不同的对象\ns1 存放的是指向 "字符串"对象存在于堆内存中的地址\ns1.equals(s3)  返回true；equals只比较内容\n== 比较的是内存地址\n')])])]),v("p",[a._v("程序中频繁操作字符串，就会产生很多的临时变量，使用"),v("code",[a._v("StringBuilder")]),a._v(" 和 "),v("code",[a._v("StringBuffer")]),a._v(" 就不会出现该问题；二者基本相似，不同在于 "),v("code",[a._v("StringBuilder")]),a._v("是线程安全的， "),v("code",[a._v("StringBuilder")]),a._v("没有实现但性能更高；所以一般情况下创建内容可变字符串，优先考虑 "),v("code",[a._v("StringBuilder")])]),a._v(" "),v("h5",{attrs:{id:"自动类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动类型转换"}},[a._v("#")]),a._v(" 自动类型转换")]),a._v(" "),v("ol",[v("li",[a._v("两种类型要相互兼容")]),a._v(" "),v("li",[a._v("目标类型要大于源类型")])]),a._v(" "),v("h5",{attrs:{id:"强制类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[a._v("#")]),a._v(" 强制类型转换")]),a._v(" "),v("p",[a._v("语法：(要转化为的数据类型)值")]),a._v(" "),v("h4",{attrs:{id:"运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),v("ul",[v("li",[a._v("算术运算符")])]),a._v(" "),v("p",[v("code",[a._v("+ - * / % ++ --")])]),a._v(" "),v("ul",[v("li",[a._v("% 用来求余数，也称为”取模运算符")])]),a._v(" "),v("hr"),a._v(" "),v("ul",[v("li",[a._v("赋值运算符\n"),v("code",[a._v("= += -= += /= %=")])])]),a._v(" "),v("hr"),a._v(" "),v("ul",[v("li",[a._v("比较运算符\n"),v("code",[a._v("> < >= <=")]),a._v(" 两边的操作数是数值类型")])]),a._v(" "),v("p",[v("code",[a._v("== !=")]),a._v(" 两边既可以是数值类型也可以是引用类型")]),a._v(" "),v("hr"),a._v(" "),v("ul",[v("li",[a._v("逻辑运算符\n"),v("code",[a._v("&& || !")])])]),a._v(" "),v("p",[v("code",[a._v("^")]),a._v(" 有且必须一个为true一个为false")]),a._v(" "),v("ul",[v("li",[a._v("条件运算符")])]),a._v(" "),v("p",[v("code",[a._v("? :")]),a._v(" 三元运算符")]),a._v(" "),v("h4",{attrs:{id:"条件语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[a._v("#")]),a._v(" 条件语句")]),a._v(" "),v("h5",{attrs:{id:"swith"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#swith"}},[a._v("#")]),a._v(" swith")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("switch后的值必须是整形或字符型")])]),a._v(" "),v("li",[v("p",[a._v("case后面的可以使常量也可以是常量表达式")])]),a._v(" "),v("li",[v("p",[a._v("匹配后，只有遇到break或语句结束，才会停止执行，否则会执行下一个case中的值")])])]),a._v(" "),v("h5",{attrs:{id:"for-循环变量初始化-循环条件-循环变量变化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#for-循环变量初始化-循环条件-循环变量变化"}},[a._v("#")]),a._v(" for(循环变量初始化;循环条件;循环变量变化) {}}")]),a._v(" "),v("ol",[v("li",[a._v("循环变量初始化在循环中只执行一次")]),a._v(" "),v("li",[a._v("进行循环条件的判断，为真执行循环体")]),a._v(" "),v("li",[a._v("改变循环变量的值")]),a._v(" "),v("li",[v("code",[a._v("2 -> 3 ->4")])])]),a._v(" "),v("ul",[v("li",[a._v("括号中的三个表达式可以省略但是分号不能省略")]),a._v(" "),v("li",[a._v("循环变量初始化和循环变量变化，可以用逗号隔开")]),a._v(" "),v("li",[a._v("break continue")])]),a._v(" "),v("h5",{attrs:{id:"foreach"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[a._v("#")]),a._v(" foreach")]),a._v(" "),v("p",[a._v("遍历数组，集合\n语法：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("for(类型 xxx: 遍历对象) {\n  print(xxx)\n}\n")])])]),v("h4",{attrs:{id:"数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("声明：")]),a._v(" "),v("ol",[v("li",[a._v("类型[] xxx;")]),a._v(" "),v("li",[a._v("类型 xxx[];")])])]),a._v(" "),v("li",[v("p",[a._v("分配空间\nxxx = new 类型[ 长度]")])])]),a._v(" "),v("p",[a._v("合并以上： "),v("code",[a._v("int[] xxx = new int[ 3]")])]),a._v(" "),v("ul",[v("li",[a._v("赋值")])]),a._v(" "),v("p",[v("code",[a._v("xxx[ 1] = xx")])]),a._v(" "),v("p",[v("code",[a._v("int[] xxx = { 11, 12, 13 }")]),a._v(" 等同于 "),v("code",[a._v("int[] xxx = new int[ 不能有长度]{ 11, 12, 13 }")])]),a._v(" "),v("ul",[v("li",[a._v("工具方法Arrays的使用")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('import java.util.Arrays;\nString[] names = {"sports", "game", "movie" };\nArrays.sort(names);\nSystem.out.println("all name:" + Arrays.toString(names));\n')])])]),v("h5",{attrs:{id:"二维数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二维数组"}},[a._v("#")]),a._v(" 二维数组")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("- 声明：int[][] arr = new int[2][3] 或者  int[][] arr ={{1,2,3},{4,5,6}}\n\n- 赋值只能具体到某个值进行操作： arr[1] = {1,3,3}; arr = {{1,3,3}, {1,4,3}} 报错\n")])])]),v("h4",{attrs:{id:"方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[a._v("#")]),a._v(" 方法")]),a._v(" "),v("p",[a._v("语法：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("访问修饰符 返回值类型 方法名(类型) {\n  方法体\n}\n")])])]),v("ul",[v("li",[a._v("访问修饰符：public, protected, private,或省略")]),a._v(" "),v("li",[a._v("返回值类型：没有返回值用void")])]),a._v(" "),v("h5",{attrs:{id:"方法重载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[a._v("#")]),a._v(" 方法重载")]),a._v(" "),v("ul",[v("li",[a._v("同一个类中")]),a._v(" "),v("li",[a._v("相同的方法名")]),a._v(" "),v("li",[a._v("方法的参数个数，顺序，类型不同")]),a._v(" "),v("li",[a._v("与方法的修饰符，返回值没有关系")])]),a._v(" "),v("h2",{attrs:{id:"类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),v("ol",[v("li",[a._v("所有java程序都是以类为组织单元")]),a._v(" "),v("li",[a._v("定义类（定义类名，定义属性，定义方法）")])]),a._v(" "),v("h3",{attrs:{id:"对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),v("ul",[v("li",[a._v("类是对象的类型")]),a._v(" "),v("li",[a._v("创建对象 "),v("code",[a._v("类名 对象名 = new 构造方法()")])]),a._v(" "),v("li",[a._v("使用对象 对象名加调用")])]),a._v(" "),v("h3",{attrs:{id:"成员变量和局部变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#成员变量和局部变量"}},[a._v("#")]),a._v(" 成员变量和局部变量")]),a._v(" "),v("p",[a._v("成员变量：在类中定义，描述对象将要有什么\n局部变量：类的方法中定义，方法中保存临时数据")]),a._v(" "),v("ul",[v("li",[a._v("只会给成员变量初始值")]),a._v(" "),v("li",[a._v("成员变量和局部变量同名，遵循就近原则")])]),a._v(" "),v("h3",{attrs:{id:"构造方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[a._v("#")]),a._v(" 构造方法")]),a._v(" "),v("ul",[v("li",[a._v("new 构造方法 创建新对象")]),a._v(" "),v("li",[a._v("定义用来初始化对象的方法，构造方法与类同名且没有返回值")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("public 构造方法名(参数) {\n  \n}\n")])])]),v("ul",[v("li",[a._v("没有指定无参的构造方法，系统会自动生成一个，也可以自己写无参构造方法")]),a._v(" "),v("li",[a._v("有参数构造方法")])]),a._v(" "),v("h4",{attrs:{id:"静态变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态变量"}},[a._v("#")]),a._v(" 静态变量")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("在类中定义")])]),a._v(" "),v("li",[v("p",[a._v("用static修饰，它属于整个类所有，而不是某个对象所有；可以直接用类名进行访问")])]),a._v(" "),v("li",[v("p",[a._v("static可修饰变量、方法、代码块")])])]),a._v(" "),v("h4",{attrs:{id:"final-关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#final-关键字"}},[a._v("#")]),a._v(" final 关键字")]),a._v(" "),v("p",[a._v("语法 ： final xxx")]),a._v(" "),v("ol",[v("li",[a._v("修饰类   类不可继承")]),a._v(" "),v("li",[a._v("修饰方法  方法不可覆盖")]),a._v(" "),v("li",[a._v("修饰属性  只可以在初始化时赋值一次")])]),a._v(" "),v("p",[a._v("子类构造方法中，没有显示调用父类的构造方法。则系统默认调用父类午餐的构造方法")]),a._v(" "),v("p",[a._v("Object类是所有类的父类")]),a._v(" "),v("ul",[v("li",[a._v("toString() 方法重写")]),a._v(" "),v("li",[a._v("equals  比较对象的引用地址是否相同")])]),a._v(" "),v("h4",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),v("p",[a._v("同一个接口，使用不同的实例，执行不同的操作")]),a._v(" "),v("ol",[v("li",[v("p",[a._v("引用的多态  父类的引用指向子类的对象  父类的引用指向本类的对象 "),v("code",[a._v("Parent p = new Child();")])])]),a._v(" "),v("li",[v("p",[a._v("继承")])]),a._v(" "),v("li",[v("p",[a._v("重写,子类重写父类方法")])])]),a._v(" "),v("p",[a._v("不能使用子类的特有的属性和方法，强制转换："),v("code",[a._v("Tiger tg = (Tiger) am;")]),a._v(" 后即可访问")]),a._v(" "),v("p",[a._v("tg 指向最开始在堆内存中创建的那个 Tiger类型的对象")]),a._v(" "),v("p",[a._v("减少了多余对象的创建")]),a._v(" "),v("h2",{attrs:{id:"uml-统一建模语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#uml-统一建模语言"}},[a._v("#")]),a._v(" UML 统一建模语言")]),a._v(" "),v("p",[a._v("图形话语言")]),a._v(" "),v("ol",[v("li",[a._v("用例图")]),a._v(" "),v("li",[a._v("序列图： 按照交互，发生的一系列顺序")]),a._v(" "),v("li",[a._v("类图")])]),a._v(" "),v("h2",{attrs:{id:"异常处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[a._v("#")]),a._v(" 异常处理")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("Throwable 类 java中所有不正常类都继承于它\n  -- Error: 虚拟机错误，线程死锁，一般出现 程序就挂了\n  -- Exception：编码、环境、用户操作输入出现问题\n     -- RuntimeException：非检查异常，数组越界，引用空对象的属性或方法，等等；由虚拟机自动抛出并捕获。\n         -- NullPointerException(空指针异常) `String a = null;print(a.length())`\n         -- ArrayIndexOutOfBoundsException(数组下标越界)\n         -- ClassCastException(类型转换异常)\n         -- ArithmeticExceptior(算术异常) `1/0`\n     -- 其它：检查异常；手动添加捕获，以及处理语句\n         -- IOException(文件异常)\n         -- SQLException(SQL异常)\n")])])]),v("ul",[v("li",[v("p",[a._v("catch 多异常捕获，从子类到父类捕获")])]),a._v(" "),v("li",[v("p",[a._v("finally语句中去释放占用的资源")])]),a._v(" "),v("li",[v("p",[a._v("抛出异常：throw")])])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v('throws 声明将要抛出何种类型的异常\n如下是将错误抛出给更上一层的tryCatch，否则就直接在内部写tryCatch\npublic void 方法名(参数列表) throws Exception {\n  // 调用会抛出异常的方法或\n  throw new Exception("异常说明");\n} \n')])])]),v("ul",[v("li",[a._v("自定义异常 继承Exception")])]),a._v(" "),v("h2",{attrs:{id:"时间处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间处理"}},[a._v("#")]),a._v(" 时间处理")]),a._v(" "),v("ul",[v("li",[a._v("将 Calendar 转换为 Date  使用 getTime()")]),a._v(" "),v("li",[a._v("getTimeInMillis() 获取 Calendar 的时间值，以毫秒为单位")])]),a._v(" "),v("h2",{attrs:{id:"集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[a._v("#")]),a._v(" 集合")]),a._v(" "),v("ul",[v("li",[a._v("集合中元素可以是任意类型的对象的引用")]),a._v(" "),v("li",[a._v("在类的内部对数据进行组织")]),a._v(" "),v("li",[a._v("简单快捷的搜索大数量的条目")]),a._v(" "),v("li",[a._v("有些集合提供了一系列有序的元素，可以在序列中快速的插入或删除有关元素")]),a._v(" "),v("li",[a._v("有些集合，提供了映射关系，可以通过关键字去快速查找唯一对象，这个关键字可以是任意类型")]),a._v(" "),v("li",[a._v("集合长度可变")])]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("Collection-- List  排列有序，可重复\n             -- ArrayList(数组序列) \n          -- Queue 排列有序，可重复\n             -- LinkedList(链表)\n          -- Set 无序，不可重复\n             == HashSet(哈希集)\n存储的是一个一个的对象\n\nMap -- HashMap(哈希表)\n映射关系，键值对\n")])])]),v("ul",[v("li",[a._v("hashMap.values() 返回集合包含的值")])]),a._v(" "),v("h3",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[a._v("#")]),a._v(" List")]),a._v(" "),v("ul",[v("li",[a._v("调用contains方法，遍历list中的每一个元素，再调用每一个元素的equals方法，与传入的参数比较")])]),a._v(" "),v("h3",{attrs:{id:"set："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set："}},[a._v("#")]),a._v(" Set：")]),a._v(" "),v("ul",[v("li",[a._v("Set 中没有 get 方法")]),a._v(" "),v("li",[a._v("循环Set 每次的结果循序不一致")]),a._v(" "),v("li",[a._v("调用 contains 时，先调用每一个元素的 hashCode 方法返回hash码，如果hash码相同，再调用equals判断是否相等。都相等才相等")])]),a._v(" "),v("h3",{attrs:{id:"map"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" Map:")]),a._v(" "),v("ul",[v("li",[a._v("元素为键值对 key-value")]),a._v(" "),v("li",[a._v("键值对以Entry类型的对象形式存在")]),a._v(" "),v("li",[a._v("key不可重复 value可以")]),a._v(" "),v("li",[a._v("Map接口提供了返回key值集合，value值集合以及Entry集合的方法")]),a._v(" "),v("li",[a._v("支持泛型，"),v("code",[a._v("Map< key类型, value类型>")])])]),a._v(" "),v("h4",{attrs:{id:"hashmap"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[a._v("#")]),a._v(" HashMap")]),a._v(" "),v("ul",[v("li",[a._v("是Map的一个重要实现类，")]),a._v(" "),v("li",[a._v("其中的Entry对象是无序列的")]),a._v(" "),v("li",[a._v("key和value都可以为null")])]),a._v(" "),v("h2",{attrs:{id:"泛型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[a._v("#")]),a._v(" 泛型")]),a._v(" "),v("ul",[v("li",[a._v("规定了某个集合只可以存放特定类型的对象，会在编译期间进行类型检测")]),a._v(" "),v("li",[a._v("泛型集合不能添加除泛型及其子类型以外的对象，否则会报错")]),a._v(" "),v("li",[a._v("不能是基本类型，要用基本类型，要使用包装类")])]),a._v(" "),v("h2",{attrs:{id:"javadoc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javadoc"}},[a._v("#")]),a._v(" javadoc")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("intelliJ 打开 Tools -> generate JavaDoc")])]),a._v(" "),v("li",[v("p",[a._v("如果报编码错误，在 other command 中添加 -encoding utf-8 -charset utf-8")])])]),a._v(" "),v("h3",{attrs:{id:"hashmap-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-2"}},[a._v("#")]),a._v(" HashMap")]),a._v(" "),v("ul",[v("li",[a._v("ConcurrentHashMap 解决其在多线程编程中是线程不安全的，而Hashtable由于使用了synchronized修饰方法而导致执行效率不高")])]),a._v(" "),v("h2",{attrs:{id:"学习笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#学习笔记"}},[a._v("#")]),a._v(" 学习笔记")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果;SUN公司制定了一系列的Java虚拟机规范;")])]),a._v(" "),v("li",[v("p",[a._v("java se 是标准版，包含标准JVM和标准库； java ee 是企业版，加了大量的api和库，两者虚拟机一致；java me 针对嵌入式设备的“瘦身版”,几乎没有使用；")])])]),a._v(" "),v("h3",{attrs:{id:"相关名词"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关名词"}},[a._v("#")]),a._v(" 相关名词")]),a._v(" "),v("ul",[v("li",[a._v("JVM: java virtual machine")]),a._v(" "),v("li",[a._v("JDK：java development kit（套件）")]),a._v(" "),v("li",[a._v("JRE：java runtime environment")]),a._v(" "),v("li",[a._v("JSR规范：Java Specification Request")]),a._v(" "),v("li",[a._v("JCP组织：Java Community Process")])]),a._v(" "),v("p",[a._v("关系")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("  —— —— —— —— compiler，debugger， etc\n |\nJDK —— \n |    |\n |   JRE —— JVM + runtime library\n |    |\n |  ——\n\nWindows | Linux │ macOS │ others \n")])])]),v("h3",{attrs:{id:"安装jdk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安装jdk"}},[a._v("#")]),a._v(" 安装JDK")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("oracle官网 -> product -> developer tools -> java se jdk -> Downloads -> 选择最下方对应的版本下载")])]),a._v(" "),v("li",[v("p",[a._v("安装完后，在安装路径(默认"),v("code",[a._v("C:\\Program Files\\Java\\jdk-12.0.2")]),a._v(") 中查看")])]),a._v(" "),v("li",[v("p",[a._v("将bin添加到环境变量")])])]),a._v(" "),v("h3",{attrs:{id:"jdk与jvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdk与jvm"}},[a._v("#")]),a._v(" JDK与JVM")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("OpenJ9：高性能可伸缩的 Java 虚拟机，可作为 Hotspot 的替代者用于 OpenJDK")])]),a._v(" "),v("li",[v("p",[a._v("HotSpot：是JVM（Java Virtual Machine），openJDK所包含")])]),a._v(" "),v("li",[v("p",[a._v("OpenJDK：是一个完整的开发工具包，包含其他组件，如Java 类库以及 JVM")])])]),a._v(" "),v("hr"),a._v(" "),v("h2",{attrs:{id:"教程笔记："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#教程笔记："}},[a._v("#")]),a._v(" 教程笔记：")]),a._v(" "),v("p",[a._v("源文件 -> 编译器 -> 字节码文件 -> 解释器")]),a._v(" "),v("h3",{attrs:{id:"环境变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),v("p",[a._v("JAVA_HOME 配置JDK安装路径 系统变量里新建(地址为jdk安装的根目录，如：D:\\java)")]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("PATH   配置JDK命令文件的位置  在path变量中编辑即可，D:\\java\\bin")]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("从java9开始可以不用配置")])]),a._v(" "),v("p",[a._v("CLASSPATH  配置库类文件的位置 系统变量里新建(地址为jdk安装的根目录，如：D:\\java\\lib)")]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("验证环境变量配置是否正确  在命令行输入java 和javac 显示正确提示即配置正确")]),a._v(" "),v("h3",{attrs:{id:"用记事本编写程序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用记事本编写程序"}},[a._v("#")]),a._v(" 用记事本编写程序")]),a._v(" "),v("ol",[v("li",[a._v("源代码文件 .java 文件")])]),a._v(" "),v("ul",[v("li",[a._v("可以直接运行 "),v("code",[a._v("java FirstStep.java")])])]),a._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[a._v("使用javac命令编译 源代码文件，得到.class的字节码文件")])]),a._v(" "),v("ul",[v("li",[a._v("编写java文件")]),a._v(" "),v("li",[a._v("用javac编译: "),v("code",[a._v("javac FirstStep.java")]),a._v(" ,生成同名.class文件")]),a._v(" "),v("li",[a._v("javac -encoding UTF-8 xxx.java 处理有中文")])]),a._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[a._v("解释器（不同的平台去解释字节码文件），使用java命令")])]),a._v(" "),v("ul",[v("li",[a._v("java是解释class文件的解释器，是class的执行引擎")]),a._v(" "),v("li",[a._v("执行字节码文件不需要加后缀名")]),a._v(" "),v("li",[v("code",[a._v("java FirstStep")]),a._v("(在cmd上执行报找不到类，在bash上正常)")])]),a._v(" "),v("h3",{attrs:{id:"使用ide"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用ide"}},[a._v("#")]),a._v(" 使用IDE")]),a._v(" "),v("ol",[v("li",[a._v("创建java项目")]),a._v(" "),v("li",[a._v("创建程序包")]),a._v(" "),v("li",[a._v("编写java源程序")]),a._v(" "),v("li",[a._v("运行java程序(点击运行后编译器自动编译了)")])]),a._v(" "),v("h2",{attrs:{id:"spring"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[a._v("#")]),a._v(" spring")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("一个开源框架(Spring Framework)")])]),a._v(" "),v("li",[v("p",[a._v("轻量的控制反转IoC")])]),a._v(" "),v("li",[v("p",[a._v("面向切面AOP的容器框架")])]),a._v(" "),v("li",[v("p",[a._v("大小与开销两方面都是轻量的")])]),a._v(" "),v("li",[v("p",[a._v("Bean，它代表的就是由Spring管辖的对象")])]),a._v(" "),v("li",[v("p",[a._v("Spring MVC和Spring Boot都属于Spring，Spring MVC 是基于Spring的一个 MVC 框架，而Spring Boot 是基于Spring的一套快速开发整合包")])]),a._v(" "),v("li",[v("p",[a._v("dependengcy: 用 mvc 选 spring web ，用 webFlux 选spring reactive web")])])]),a._v(" "),v("h3",{attrs:{id:"spring-mvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[a._v("#")]),a._v(" spring mvc")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("是spring的一部分")])]),a._v(" "),v("li",[v("p",[a._v("主要用于开发WEB应用和网络接口，它是Spring的一个模块")])])]),a._v(" "),v("h3",{attrs:{id:"spring-boot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[a._v("#")]),a._v(" spring boot")]),a._v(" "),v("p",[a._v("创建独立的Spring应用程序，用于创建微服务；用于简化 Spring 应用从搭建到开发的过程；")]),a._v(" "),v("h4",{attrs:{id:"使用-spring-initializr-页面输出项目"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-initializr-页面输出项目"}},[a._v("#")]),a._v(" 使用 Spring Initializr 页面输出项目")]),a._v(" "),v("ol",[v("li",[a._v("勾选配置,设置好 Group ，Artifact")]),a._v(" "),v("li",[a._v("下载，将其移入放置项目的文件夹")]),a._v(" "),v("li",[a._v("在开发工具中选择从已有项目资源(上一步下载的压缩包加压后的文件)新建；或是选择导入项目；")]),a._v(" "),v("li",[a._v("勾选相关设置")]),a._v(" "),v("li",[a._v("等待安装依赖包")]),a._v(" "),v("li",[a._v("完成")])]),a._v(" "),v("p",[a._v("Artifact：可以当它为一个web项目")]),a._v(" "),v("hr"),a._v(" "),v("ul",[v("li",[v("p",[a._v("构建工具 Maven，Gradle")])]),a._v(" "),v("li",[v("p",[a._v("spring framework  -> spring boot  -> spring cloud")])]),a._v(" "),v("li",[v("p",[a._v("Netty和Tomcat最大的区别就在于通信协议，Tomcat是基于Http协议的，实质是一个基于http协议的web容器; Netty能通过编程自定义各种协议，因为netty能够通过codec自己来编码/解码字节流，完成类似redis访问的功能，这就是最大的不同")])]),a._v(" "),v("li",[v("p",[a._v("pom.xml 文件用于 maven 构建，指定了如何编译和打包项目")])]),a._v(" "),v("li",[v("p",[a._v("Servlet 是运行在Web服务器上的小程序，通过http协议和客户端进行交互")])]),a._v(" "),v("li",[v("p",[a._v("@Configuration  理解为替换XML配置文件 作用于类上，相当于一个xml配置文件")])]),a._v(" "),v("li",[v("p",[a._v("@Bean 作用于方法上，相当于xml配置中的"),v("code",[a._v("< bean>")])])]),a._v(" "),v("li",[v("p",[a._v("Optional 防止空指针提出的接口")])]),a._v(" "),v("li",[v("p",[a._v("spring注解 @Autowired ：表示被修饰的类需要注入对象,spring会扫描所有被@Autowired标注的类,然后根据 类型 在ioc容器中找到匹配的类注入")])]),a._v(" "),v("li",[v("p",[a._v("修改端口："),v("code",[a._v("application.properties")]),a._v(" 文件中添加 "),v("code",[a._v("server.port = 8880")])])]),a._v(" "),v("li",[v("p",[a._v("【spring-boot-starter-web】 在当下项目运行mvn spring-boot:run就可以直接启用一个嵌套了tomcat的web应用。如果没有提供任何服务的Cotroller,访问任何路径都会返回一个springBoot默认的错误页面 Whitelabel Error Page")])])]),a._v(" "),v("h2",{attrs:{id:"第三方包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第三方包"}},[a._v("#")]),a._v(" 第三方包")]),a._v(" "),v("ul",[v("li",[a._v("fastJson： 传入的对象要有 getter 方法")])])])}),[],!1,null,null,null);t.default=r.exports}}]);